{"version":3,"sources":["../src/conversions.js","../src/arabicToRoman.js","../src/romanToArabic.js","index.js"],"names":["toArabic","I","V","X","L","C","D","M","toRoman","arabicToRoman","decimals","numeral","isNaN","Error","group","groupInDecimals","reduce","acc","val","convertToRoman","Math","floor","decimalValue","valueCount","decimalRomanNumeral","fiveTimesDecimalRomanNumeral","tenTimesDecimalRomanNumeral","repeat","romanToArabic","validGroups","splitIntoGroups","toUpperCase","error","console","sumCharGroup","nextChar","split","groups","char","i","push","digit","prevDigit","arabicInputId","romanInputId","getArabicInput","document","getElementById","getRomanInput","handleConversion","target","value","length","clearInputs","id","uppercaseValue","querySelector","textContent","handleKeyUp","key","domReady","fn","addEventListener","readyState","init"],"mappings":";AAUO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA,QAAA,cAAA,EAVA,IAAMA,EAAW,CACtBC,EAAG,EACHC,EAAG,EACHC,EAAG,GACHC,EAAG,GACHC,EAAG,IACHC,EAAG,IACHC,EAAG,KAGE,QAAA,SAAA,EAAA,IAAMC,EAAU,CAClB,EAAA,IACA,EAAA,IACC,GAAA,IACA,GAAA,IACC,IAAA,IACA,IAAA,IACC,KAAA,KAPD,QAAA,QAAA;;AC8CQC,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,gBAAAA,EAAAA,QAAAA,eAAAA,EAAAA,QAAAA,aAAAA,EAxDf,IAAA,EAAA,QAAA,iBAEMC,EAAW,CAAC,IAAM,IAAK,GAAI,GAEjC,SAASD,IAAeE,IAAAA,EAAU,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,EAE5BC,GAAAA,MAAMD,IAAYA,EAAU,EACxB,MAAA,IAAIE,MAASF,GAAAA,OAAAA,EAAnB,mCAGIG,IAAAA,EAAQC,EAAgBJ,GAEvBD,OAAAA,EAASM,OAAO,SAACC,EAAKC,GACvBJ,OAAAA,EAAMI,GAAaD,EAAME,EAAeD,EAAKJ,EAAMI,IAEhDD,GACN,IAGE,SAASF,IAAiBJ,IAAAA,EAAU,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,EAClCD,OAAAA,EAASM,OAAO,SAACC,EAAKC,GAMpBD,OALHN,GAAWO,IACbD,EAAIC,GAAOE,KAAKC,MAAMV,EAAUO,GAChCP,GAAWO,EAAMD,EAAIC,IAGhBD,GACN,IAGE,SAASE,EAAgBG,EAAcC,GACtCC,IAAAA,EAAsBhB,EAAQc,QAAAA,GAC9BG,EAA+BjB,EAAQc,QAAe,EAAfA,GACvCI,EAA8BlB,EAAQc,QAAe,GAAfA,GAEpCC,OAAAA,GACD,KAAA,EACA,KAAA,EACA,KAAA,EACIC,OAAAA,EAAoBG,OAAOJ,GAE/B,KAAA,EACIC,OAAAA,EAAsBC,EAE1B,KAAA,EACA,KAAA,EACA,KAAA,EACA,KAAA,EACIA,OAAAA,EAA+BD,EAAoBG,OAAOJ,EAAa,GAE3E,KAAA,EACIC,OAAAA,EAAsBE,GAKpBjB,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;ACKAmB,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,gBAAAA,EAAAA,QAAAA,aAAAA,EAAAA,QAAAA,aAAAA,EA7Df,IAAA,EAAA,QAAA,iBAEA,SAASA,IAAejB,IAClBkB,EADkBlB,EAAU,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAG5B,IACFkB,EAAcC,EAAgBnB,EAAQoB,eACtC,MAAOC,GAED,MADNC,QAAQD,MAAMA,GACR,IAAInB,MAASF,GAAAA,OAAAA,EAAnB,iCAGKkB,OAAAA,EAAYb,OAAO,SAACC,EAAKC,GAAQD,OAAAA,EAAMiB,EAAahB,IAAM,GAO5D,SAASY,IAAiBnB,IAE3BwB,EAF2BxB,EAAU,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GACrCG,EAAQ,GAGLH,OAAAA,EAAQyB,MAAM,IAAIpB,OAAO,SAACqB,EAAQC,EAAMC,GAGzC,GAFJzB,GAASwB,GAEJtC,EAASsC,SAAAA,GACN,MAAA,IAAIzB,MAASyB,GAAAA,OAAAA,EAAnB,4CAUKD,SAPPF,EAAWxB,EAAQ4B,EAAI,KAENvC,EAASmC,SAAAA,GAAYnC,EAASsC,SAAAA,MAC7CD,EAAOG,KAAK1B,GACZA,EAAQ,IAGHuB,GACN,IAOE,SAASH,IAAcpB,IACxB2B,EACAC,EAFwB5B,EAAQ,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAI7BA,OAAAA,EAAMsB,MAAM,IAAIpB,OAAO,SAACC,EAAKqB,EAAMC,GAIpC,OAHJE,EAAQzC,EAASsC,SAAAA,KACjBI,EAAY1C,EAASc,SAAAA,EAAMyB,EAAI,MAEbG,GAAaD,EACtBxB,EAAMwB,EAGRA,EAAQxB,GACd,GAGUW,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;ACDf,aA5DA,IAAA,EAAA,EAAA,QAAA,yBACA,EAAA,EAAA,QAAA,yBA2DA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAzDA,IAAMe,EAAgB,cAChBC,EAAe,aAEfC,EAAiB,WAAMC,OAAAA,SAASC,eAAeJ,IAC/CK,EAAgB,WAAMF,OAAAA,SAASC,eAAeH,IAEpD,SAASK,EAA8B,GAAVC,IAAAA,EAAAA,EAAAA,OACvBA,GAAwB,IAAxBA,EAAOC,MAAMC,OAAc,OAAOC,IAElC,IACEH,GAAAA,EAAOI,KAAOV,EAAc,CACxBW,IAAAA,EAAiBL,EAAOC,MAAMpB,cAEpCiB,IAAgBG,MAAQI,EACxBV,IAAiBM,OAAQ,EAAcI,EAAAA,SAAAA,QAEvCP,IAAgBG,OAAQ,EAAcD,EAAAA,SAAAA,EAAOC,OAE/C,MAAOnB,GACPC,QAAQD,MAAMA,GAEdc,SAASU,cAAc,UAAUC,YAAczB,GAInD,SAAS0B,EAAsB,GACjB,WADUC,EAAAA,KAEpBN,IAIJ,SAASA,IACPL,IAAgBG,MAAQ,GACxBN,IAAiBM,MAAQ,GACzBL,SAASU,cAAc,UAAUC,YAAc,GAGjD,SAASG,EAAUC,GAEjBf,SAASgB,iBAAiB,mBAAoBD,GAGlB,gBAAxBf,SAASiB,YAAwD,aAAxBjB,SAASiB,YACpDF,IAIJ,SAASG,IACalB,SAASC,eAAe,eAEhCe,iBAAiB,QAAST,GAEtCP,SAASgB,iBAAiB,QAASJ,GACnCV,IAAgBc,iBAAiB,QAASb,GAC1CJ,IAAiBiB,iBAAiB,QAASb,GAG7CW,EAASI","file":"public.28068254.js","sourceRoot":"../public","sourcesContent":["export const toArabic = {\n  I: 1,\n  V: 5,\n  X: 10,\n  L: 50,\n  C: 100,\n  D: 500,\n  M: 1000\n}\n\nexport const toRoman = {\n  1: 'I',\n  5: 'V',\n  10: 'X',\n  50: 'L',\n  100: 'C',\n  500: 'D',\n  1000: 'M'\n}\n","import { toRoman } from './conversions'\n\nconst decimals = [1000, 100, 10, 1]\n\nfunction arabicToRoman (numeral = 0) {\n  // if (Number.isNaN(Number(numeral)) || numeral < 0 || numeral > 3999) {\n  if (isNaN(numeral) || numeral < 0) {\n    throw new Error(`${numeral} is not a valid arabic numeral`)\n  }\n\n  const group = groupInDecimals(numeral)\n\n  return decimals.reduce((acc, val) => {\n    if (group[val]) return acc + convertToRoman(val, group[val])\n\n    return acc\n  }, '')\n}\n\nexport function groupInDecimals (numeral = 0) {\n  return decimals.reduce((acc, val) => {\n    if (numeral >= val) {\n      acc[val] = Math.floor(numeral / val)\n      numeral -= val * acc[val]\n    }\n\n    return acc\n  }, {})\n}\n\nexport function convertToRoman (decimalValue, valueCount) {\n  const decimalRomanNumeral = toRoman[decimalValue]\n  const fiveTimesDecimalRomanNumeral = toRoman[decimalValue * 5]\n  const tenTimesDecimalRomanNumeral = toRoman[decimalValue * 10]\n\n  switch (valueCount) {\n    case 1:\n    case 2:\n    case 3: {\n      return decimalRomanNumeral.repeat(valueCount)\n    }\n    case 4: {\n      return decimalRomanNumeral + fiveTimesDecimalRomanNumeral\n    }\n    case 5:\n    case 6:\n    case 7:\n    case 8: {\n      return fiveTimesDecimalRomanNumeral + decimalRomanNumeral.repeat(valueCount - 5)\n    }\n    case 9: {\n      return decimalRomanNumeral + tenTimesDecimalRomanNumeral\n    }\n  }\n}\n\nexport default arabicToRoman\n","import { toArabic } from './conversions'\n\nfunction romanToArabic (numeral = '') {\n  let validGroups\n\n  try {\n    validGroups = splitIntoGroups(numeral.toUpperCase())\n  } catch (error) {\n    console.error(error)\n    throw new Error(`${numeral} is an invalid roman numeral`)\n  }\n\n  return validGroups.reduce((acc, val) => acc + sumCharGroup(val), 0)\n}\n\n/**\n * Returns an array of logical groups from a roman numeral\n * @param {String} numeral - An uppercase roman numeral\n */\nexport function splitIntoGroups (numeral = '') {\n  let group = ''\n  let nextChar\n\n  return numeral.split('').reduce((groups, char, i) => {\n    group += char\n\n    if (!toArabic[char]) {\n      throw new Error(`${char} is not a valid roman numeral character`)\n    }\n\n    nextChar = numeral[i + 1]\n\n    if (!nextChar || toArabic[nextChar] < toArabic[char]) {\n      groups.push(group)\n      group = ''\n    }\n\n    return groups\n  }, [])\n}\n\n/**\n * Returns the sum of a group of roman numeral characters\n * @param {String} group - A grouping of roman numeral characters\n */\nexport function sumCharGroup (group = '') {\n  let digit\n  let prevDigit\n\n  return group.split('').reduce((acc, char, i) => {\n    digit = toArabic[char]\n    prevDigit = toArabic[group[i - 1]]\n\n    if (!prevDigit || prevDigit >= digit) {\n      return acc + digit\n    }\n\n    return digit - acc\n  }, 0)\n}\n\nexport default romanToArabic\n","import arabicToRoman from '../src/arabicToRoman'\nimport romanToArabic from '../src/romanToArabic'\n\nconst arabicInputId = 'arabicInput'\nconst romanInputId = 'romanInput'\n\nconst getArabicInput = () => document.getElementById(arabicInputId)\nconst getRomanInput = () => document.getElementById(romanInputId)\n\nfunction handleConversion ({ target }) {\n  if (target.value.length === 0) return clearInputs()\n\n  try {\n    if (target.id === romanInputId) {\n      const uppercaseValue = target.value.toUpperCase()\n\n      getRomanInput().value = uppercaseValue\n      getArabicInput().value = romanToArabic(uppercaseValue)\n    } else {\n      getRomanInput().value = arabicToRoman(target.value)\n    }\n  } catch (error) {\n    console.error(error)\n\n    document.querySelector('.error').textContent = error\n  }\n}\n\nfunction handleKeyUp ({ key }) {\n  if (key === 'Escape') {\n    clearInputs()\n  }\n}\n\nfunction clearInputs () {\n  getRomanInput().value = ''\n  getArabicInput().value = ''\n  document.querySelector('.error').textContent = ''\n}\n\nfunction domReady (fn) {\n  // DOM isn't ready yet\n  document.addEventListener('DOMContentLoaded', fn)\n\n  // DOM is ready, fire callback\n  if (document.readyState === 'interactive' || document.readyState === 'complete') {\n    fn()\n  }\n}\n\nfunction init () {\n  const clearButton = document.getElementById('clearButton')\n\n  clearButton.addEventListener('click', clearInputs)\n\n  document.addEventListener('keyup', handleKeyUp)\n  getRomanInput().addEventListener('keyup', handleConversion)\n  getArabicInput().addEventListener('keyup', handleConversion)\n}\n\ndomReady(init)\n"]}